
створення папки на github і перенесення сайту 

git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/helios912/eDental.git
git push -u origin main

робота в локальному репозиторії

git log             список комітів  
git show XXX        показати деталі коміта
git diff XXX XXX    показати різницю між комітами


робота з файлами коміта

git diff гілка гілка      зміни між гілками
git add -p                додати виокремлені зміни між гілками або комітами
rm index.html             видалення файлу з відстежеваних
git rm index.html         видалення файлу з репозиторію
git rm <file> - видаляє файл із файлової системи та додає цю зміну до індексу. --cached параметр дозволяє видалити файл з кеша гіт, але при цьому він залишиться доступним у робочій директорії.
git diff --staged (--cached) – виведення в консоль змін, які зараз знаходяться в області індексу.
git commit -a -m “[message]” – команда поєднує дві дії – додавання всіх змін до індексу та виконання коміту (прапор -a показує, що всі файли в зміненому стані потрібно проіндексувати перед комітом).
git mv <file> - змінює ім'я файлу або переміщає файл і додає цю зміну до індексу.



.gitignore-файл, який дозволяє вказувати, що в репозиторії не слід відстежувати

*.a              Виключити всі файли зрозширенням.a     
!lib.a           Але відстежувати файл lib.a, навіть якщо він підпадає під виняток вище      
/TODO            Виключити файл TODO у кореневій директорії, але не файл у subdir/TODO       
 build/build/   Ігнорувати всі файли в директорії                 
doc/*.txt       Ігнорувати файл doc/notes.txt, але не файл doc/server/arch.txt     


Робота з тегами


git tag імя(v2.0)                        створення легких тегів
git tag -a v2.0 -m "message"             анотований тег тобто з повідомленням, нотатком 
git tag                                 Перегляд списку тегів
git tag -d v2.0                         Видалення тегу
git checkout v2.0                       Перехід на тег (для ознайомлення)   
git checkout -b version2(гілка) v2.0    Перехід на тег (зі створенням нової гілки)
git push origin :ref/tags/v2.0 To /git@github.com/helios912/eDental.git              Видалення тегу з віддаленого репозиторія 
git push origin --delete імятега        Видалення тегу з віддаленого репозиторія         


Відкочування змін

git restore <file> - скасує зміни у робочій директорії
git restore --staged <file> - прибере зміни з індексу, проте воно залишиться у робочій директорії.
git commit --amend – операція зміни останнього коміту.  
git revert <hash> - створить коміт, який скасовує зміни зазначеного. 
git show <hash> - виведе зміни, що входять до зазначеного комітету.
git rev-parse HEAD – команда для виведення хешу коміта, який вказує HEAD в консоль.
git reset <hash> - команда для скидання, «видалення», комітів. Основні параметри команди:
1. --soft - переміщує гілку, яку вказує HEAD. Є найбезпечнішим режимом.
2. --mixed - переміщає гілку, яку вказує HEAD і робить індекс таким самим, як і HEAD.
3. --hard - переміщає гілку, яку вказує HEAD, робить індекс і робочу версію такими ж, як і HEAD. Найнебезпечніший режим, оскільки може призвести до втрати даних та проблем при синхронізації з віддаленим репозиторієм.
git clean – видалення файлів, що не відстежуються, з директорії репозиторію. Коли шлях не вказаний, git clean не буде рекурсивно заходити всередину каталогів, що не відстежуються, щоб уникнути видалення зайвих файлів. Вкажіть опцію –d для рекурсивного видалення.


Робота з віддаленим репозиторієм

git remote add <name> <url> - підключає віддалений репозиторій з ім'ям <name>, доступний за посиланням <url>.
git push <remote> <local_brunch> - відправка всіх змін до <local_brunch> на віддалений репозиторій.
git fetch <remote> - завантаження об'єктів та посилань з віддаленого репозиторію.
git pull <remote> - включає зміни з віддаленого репозиторію в поточну гілку.

Обидві команди git pull і git fetch завантажують вміст(зміни від інших членів команди)  віддаленого репозиторію. 
Команда git fetch є «безпечним» варіантом із цих двох команд. Вона завантажує вміст(зміни від інших членів команди), але не оновлює робочий стан локального репозиторію, залишаючи вашу поточну роботу недоторканої. 
Команда git pull завантажує вміст для поточної локальної гілки (командою git fetch) і виконує команду git merge, створюючи коміт злиття для нового вмісту. Є ймовірність, як і за звичайного злиття, що з'являться конфлікти, які треба буде вирішувати вручну.
git fetch завантажують вміст(зміни від інших членів команди) Потім git log переглянути зміни
git log origin/main(імя віддаленої гілки) переглянути зміни в віддаленому репозиторії
git merge, створюючи коміт злиття для нового вмісту
git clone <url> – клонування віддаленого репозиторію.     
git pull origin main  завантажують вміст(зміни від інших членів команди)  віддаленого репозиторію і обєднає з локальним  іде злиття 
git commit       -зберігає зміни на локальному репозиторії


Гілкування 
git branch <name> - створює нову гілку, тобто - новий покажчик на поточний коміт.
git checkout <branch_name>     Для перемикання(переходу) вказівника HEAD на іншу гілку  
git checkout -b <branch_name>  Git дає можливість створити гілку та переключитися(перейти) на неї однією командою  
git branch -d <branch_name>    Для видалення гілки необхідно переконатися, що HEAD зараз на неї не вказує і після цього виконати команду 
git branch  Переглянути список гілок, які існують у репозиторії, 
git merge <branch_name>   Для злиття використовується де <branch_name> - ім'я гілки зміни, яку ви хочете злити в поточну (на яку вказує HEAD під час виконання команди).
git rebase -цекоманда в Git, яка дозволяє перемістити вашу гілку на нову базову гілкута застосувати ваші зміни на цю нову гілку.
git branch new-feature  Для створення нової гілки
git branch -d <ім'я_гілки>   Для видаленнягілкив Gitпотрібновикористатикоманду

Якщо коміт зливається з тим, який буде доступний рухаючись по історії прямо, то використовується спрощена процедура - просто переносячи покажчик гілки вперед, оскільки немає розбіжностей у змінах. Така операція називається “fast-forward”.
Альтернативою операції merge є операція rebase (перебазування). Вона бере зміни поточної гілки та застосовує їх поверх всього, що є у зазначеній.
Після операції rebase необхідно переключитися на гілку, в яку він виконувався і виконати злиття з перебазованою гілкою. Наприклад:
1. git rebase master
2. git checkout master
3. git merge bugfix
В результаті зміни гілки bugfix застосовані до гілки master.